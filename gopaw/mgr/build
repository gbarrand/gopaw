#!/bin/sh -f

# Copyright (C) 2018, Guy Barrand. All rights reserved.
# See the file gopaw.license for terms.

bush_home=../../bush

ourex_home=${bush_home}/../inexlib/ourex
exlib_home=${bush_home}/../inexlib/exlib

#///////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////
#. ${bush_home}/args
check_all=no
build_offscreen=no

build_hdf5=yes
build_Python=yes

build_args=
build_what=build_none
while test $# -ge 1 ; do
  case $1 in
    -batch) build_offscreen=yes;;
    -offscreen) build_offscreen=yes;;
    -check_all) check_all=yes;;
    -no_hdf5) build_hdf5=no;;
    -no_py) build_Python=no;;
    -*) build_args="${build_args} $1";;
     *) build_args="${build_args} $1";if [ $# = 1 ] ; then build_what=$1; fi;;
  esac
  shift
done

#///////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////

build_pack=gopaw

. ${bush_home}/ourex_header

if [ ${build_app} = "yes" ] ; then

  if [ ${build_visual} = "yes" ] ; then
    #cppflags="${cppflags} -wd4800 -wd4305 -wd4244"
    cppflags="${cppflags} -bigobj"
  fi

  cppflags="${cppflags} -DINLIB_USE_CSZ"  # to read sstudeny.root

  if [ ${build_hdf5} = "yes" ] ; then cppflags="${cppflags} -DAPP_USE_HDF5";fi

  if [ ${build_Python} = "yes" ] ; then
    cppflags="${cppflags} -DAPP_USE_PYTHON"
    cppfiles="${cppfiles} ${exlib_home}/exlib/spy/inlib_swig_py.cpp"
  fi
  
  cfiles="${cfiles} ../source/PAWCDF.c"
  cfiles="${cfiles} ../source/gopawcdf.c"

  cppfiles="${cppfiles} ../../inexlib/exlib/exlib/yacc/cexpr_lexer.cpp"
  cppfiles="${cppfiles} ../../inexlib/exlib/exlib/yacc/cexpr_eval.cpp"
  cppfiles="${cppfiles} ../../inexlib/exlib/exlib/yacc/fort_fmt_lexer.cpp"
  cppfiles="${cppfiles} ../../inexlib/exlib/exlib/yacc/fort_fmt.cpp"

  cppfiles="${cppfiles} ../source/PAW.cpp"

  #///////////////////////////////////////////////////
  #/// all files : ///////////////////////////////////
  #///////////////////////////////////////////////////
  cpp_files="${cpp_files} ../source/PAW.cpp"
  # -- KUIP callback functions :
  cpp_files="${cpp_files} ../source/gopaw_kuip.cpp"
  cpp_files="${cpp_files} ../source/pahelp.cpp"
  cpp_files="${cpp_files} ../source/vector_C.cpp"
  cpp_files="${cpp_files} ../source/pagpri.cpp"
  cpp_files="${cpp_files} ../source/pahbok.cpp"
  cpp_files="${cpp_files} ../source/panmas.cpp"
  cpp_files="${cpp_files} ../source/pazrz.cpp"
  cpp_files="${cpp_files} ../source/pnutil.cpp"
  cpp_files="${cpp_files} ../source/papict.cpp"
  cpp_files="${cpp_files} ../source/pafort.cpp"
  cpp_files="${cpp_files} ../source/paghpl.cpp"
  cpp_files="${cpp_files} ../source/pagksa.cpp"
  cpp_files="${cpp_files} ../source/pasigm.cpp"
  cpp_files="${cpp_files} ../source/pancut.cpp"
  cpp_files="${cpp_files} ../source/pagraf.cpp"
  cpp_files="${cpp_files} ../source/pafitv.cpp"
  cpp_files="${cpp_files} ../source/pafith.cpp"
  cpp_files="${cpp_files} ../source/pahope.cpp"
  cpp_files="${cpp_files} ../source/pahset.cpp"
  cpp_files="${cpp_files} ../source/pahio.cpp"
  cpp_files="${cpp_files} ../source/pahvec.cpp"
  cpp_files="${cpp_files} ../source/panntu.cpp"
  cpp_files="${cpp_files} ../source/pafunc.cpp"
  cpp_files="${cpp_files} ../source/pahist.cpp"
  cpp_files="${cpp_files} ../source/pavect.cpp"
  
  h_files=
  if [ ${build_offscreen} = yes ] ; then
    echo dummy > /dev/null
  else
    if [ ${build_visual} = "yes" ] ; then
      h_files="${h_files} ../source/UI_Windows"
    else
      h_files="${h_files} ../source/UI_X11"
    fi
  fi
  h_files="${h_files} ../source/UI_screen"
  h_files="${h_files} ../source/ifunction"
  h_files="${h_files} ../source/plugin_func"
  h_files="${h_files} ../source/function_manager"
  h_files="${h_files} ../source/base_viewer"
  h_files="${h_files} ../source/UI_offscreen"
  h_files="${h_files} ../source/iui"
  h_files="${h_files} ../source/session"
  h_files="${h_files} ../source/h__book"
  h_files="${h_files} ../source/funcs"
  h_files="${h_files} ../source/LUN"
  h_files="${h_files} ../source/root_aida"
  h_files="${h_files} ../gopaw/version"
  h_files="${h_files} ../source/find_object"
  h_files="${h_files} ../source/fit_object"
  h_files="${h_files} ../source/plot_histogram_2D"
  h_files="${h_files} ../source/read_hippo"

  if [ ${check_all} = yes ] ; then
    cppfiles=
    cppfiles="${cppfiles} ${h_files}"
    cppfiles="${cppfiles} ${cpp_files}"
  
    #cppfiles="${h_files}"
    #cppfiles="${cpp_files}"
  fi

  #cppfiles="../source/pahist.cpp"
  #cppfiles="../source/panntu.cpp"
  #cppfiles="../source/gopaw_kuip.cpp"
  #cppfiles=
  
#///////////////////////////////////////////////////
#///////////////////////////////////////////////////
#///////////////////////////////////////////////////
 #use_archive=no
  use_archive=yes

  use_exlib=yes
  use_inlib=yes
  
  use_KUIP=yes
  use_freetype=yes
  use_zlib=yes
  use_csz=yes
  use_gl2ps=yes
  
  use_jpeg=yes
  use_png=yes
  use_dl=yes

  if [ ${build_hdf5} = "yes" ] ; then
    use_hdf5=yes
    use_thread=yes
  fi
  if [ ${build_Python} = "yes" ] ; then
    use_Python=yes
    use_thread=yes
    use_zip=yes
  fi
  
  . ${bush_home}/use/inlib
  . ${bush_home}/use/exlib

  . ${bush_home}/use/KUIP
  . ${bush_home}/use/Python
  . ${bush_home}/use/freetype
  . ${bush_home}/use/hdf5     #centos7 : before zlib.
  . ${bush_home}/use/zip
  . ${bush_home}/use/zlib
  . ${bush_home}/use/csz
  . ${bush_home}/use/gl2ps
  
  . ${bush_home}/use/jpeg
  . ${bush_home}/use/png
  . ${bush_home}/use/thread
  . ${bush_home}/use/dl
  
  if [ ${build_offscreen} = yes ] ; then
    echo dummy > /dev/null
  else
    use_Getline=yes
    use_GL=yes
    
    . ${bush_home}/use/Getline
    . ${bush_home}/use/GL
    
    if [ ${build_visual} = "yes" ] ; then
      use_Windows=yes
      . ${bush_home}/use/Windows
    else
      use_GLX=yes
      use_X11=yes
      . ${bush_home}/use/GLX
      . ${bush_home}/use/X11
    fi
  fi    

  if [ ${check_all} = yes ] ; then build_app=no;fi

  objs=
  app_src=../source/gopaw.cpp
  
  if [ ${build_offscreen} = yes ] ; then  
    cppflags="${cppflags} -DGOPAW_OFFSCREEN"
  fi
  app_exe=gopaw
  . ${bush_home}/application

fi

if [ ${build_distrib} = "yes" ] ; then
  /bin/rm -R -f ${build_path}/distrib
    
  version="`${bush_home}/app_vers`"
  
  install_dir="${build_path}/distrib/gopaw/${version}"

  /bin/rm -R -f ${install_dir}/bin
  /bin/mkdir -p ${install_dir}/bin
  if [ ${build_visual} = "yes" ] ; then
    if [ -x ${build_path}/gopaw.exe ] ; then
      /bin/cp ${build_path}/gopaw.exe ${install_dir}/bin/.
    else
      echo "gopaw/mgr/build_app_gopaw : distrib : ${build_path}/gopaw.exe not found."
    fi
    if [ -f ${build_path}/gopaw.exe.manifest ] ; then
      /bin/cp ${build_path}/gopaw.exe.manifest ${install_dir}/bin/.
    fi
  else
    if [ -x ${build_path}/gopaw ] ; then
      /bin/cp ${build_path}/gopaw ${install_dir}/bin/.
    else
      echo "gopaw/mgr/build_app_gopaw : distrib : ${build_path}/gopaw not found."
    fi      
  fi      
  
  /bin/rm -R -f ${install_dir}/res
  /bin/mkdir -p ${install_dir}/res
  
  /bin/cp -R ../../inexlib/ourex/HEPVis/fonts ${install_dir}/res/.
  
  /bin/mkdir -p ${install_dir}/res/inlib/inlib
  items="value array typedefs num2s b2s mem sprintf snpf value.icc sto"
  for item in ${items} ; do
    /bin/cp -R ../../inexlib/inlib/inlib/${item} ${install_dir}/res/inlib/inlib/.
  done
  
  /bin/mkdir -p ${install_dir}/res/gopaw/HBOOK
  /bin/cp -R ../source/hbook.h ${install_dir}/res/gopaw/HBOOK/.
  
  /bin/mkdir -p ${install_dir}/res/gopaw/scripts
  /bin/cp -R ../scripts/sh ${install_dir}/res/gopaw/scripts/.
  /bin/cp -R ../scripts/DOS ${install_dir}/res/gopaw/scripts/.

  if [ ${build_Python} = "yes" ] ; then
    /bin/cp ${exlib_home}/exlib/spy/inlib.py ${install_dir}/res/.
    #/bin/cp ${exlib_home}/exlib/spy/inlib.py ../Android/res/raw/inlib_py.py
    /bin/rm -R -f ./python_2_7
    /bin/mkdir python_2_7
    /bin/cp -R ${ourex_home}/Python/lib ./python_2_7/.
    ${bush_home}/find_rm ./python_2_7 '*pyc'
    zip -qr python_2_7_lib_py.zip ./python_2_7
    /bin/mv python_2_7_lib_py.zip ${install_dir}/res/.
    /bin/rm -R -f python_2_7
  fi
  
  ./clean_exas
  /bin/cp -R ../examples ${install_dir}/res/gopaw/.
  
  if [ `uname` = Linux ] ; then
    app=gopaw
    app_exe=gopaw
    . ${bush_home}/sys_app
  fi
   
  platform=`${bush_home}/platform "${cpp_compiler}"`
  if [ "${platform}" = "" ] ; then
    echo "bush/app_distrib : can't guess platform for ${cpp_compiler}."
    exit
  fi

  save_dir=`pwd`

  ${bush_home}/check_app zip 'zip not found, we use tar.'
  use_status=$?;
  if [ ${use_status} != 0 ] ; then
    cd ${build_path}/distrib
    tar cf gopaw-${version}-${platform}.tar ./gopaw
    cd ${save_dir}
  else
    cd ${build_path}/distrib
    zip -qr gopaw-${version}-${platform}.zip ./gopaw
    cd ${save_dir}
  fi
   
fi

. ${bush_home}/clean
